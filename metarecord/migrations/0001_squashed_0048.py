# Generated by Django 2.2.16 on 2021-01-15 06:25

import uuid

import django.utils.timezone
from django.conf import settings
from django.db import migrations, models
from django.db.models import OuterRef, Subquery, Value
from django.db.models.functions import Concat, Trim


def add_indexes(apps, schema_editor):
    Attribute = apps.get_model("metarecord", "Attribute")
    for attribute in Attribute.objects.all():
        attribute.index = (
            max(Attribute.objects.values_list("index", flat=True) or [0]) + 1
        )
        attribute.save()


def add_initial_metarecord_versions(apps, schema_editor):
    Function = apps.get_model("metarecord", "Function")
    MetadataVersion = apps.get_model("metarecord", "MetadataVersion")

    for function in Function.objects.filter(is_template=False, metadata_versions=None):
        MetadataVersion.objects.create(
            function=function,
            modified_at=function.modified_at,
            modified_by=None,
            state=function.state,
        )


def add_attribute_value_indexes(apps, schema_editor):
    AttributeValue = apps.get_model("metarecord", "AttributeValue")

    for attribute_value in AttributeValue.objects.filter(index=0).order_by(
        "created_at"
    ):
        new_index = (
            max(
                AttributeValue.objects.filter(
                    attribute=attribute_value.attribute
                ).values_list("index", flat=True)
                or [0]
            )
            + 1
        )
        AttributeValue.objects.filter(id=attribute_value.id).update(index=new_index)


def populate_classification(apps, schema_editor):
    Classification = apps.get_model("metarecord", "Classification")
    Function = apps.get_model("metarecord", "Function")

    for function in Function.objects.filter(
        is_template=False, function_id__isnull=False
    ).order_by("function_id"):
        parent = (
            Classification.objects.get(code=function.parent.function_id)
            if function.parent
            else None
        )
        classification, created = Classification.objects.update_or_create(
            code=function.function_id,
            defaults={
                "title": function.name,
                "parent": parent,
            },
        )
        function.classification = classification
        function.name = ""
        function.save(update_fields=("classification", "name"))


def populate_function_allowed(apps, schema_editor):
    Classification = apps.get_model("metarecord", "Classification")

    for classification in Classification.objects.all():
        classification.function_allowed = not classification.children.exists()
        classification.save(update_fields=("function_allowed",))


def update_function_modified_by(apps, schema_editor):
    Function = apps.get_model("metarecord", "Function")

    for function in Function.objects.exclude(metadata_versions=None):
        metadata_version = function.metadata_versions.latest("id")
        Function.objects.filter(id=function.id).update(
            modified_by=metadata_version.modified_by
        )


def delete_soft_deleted_functions(apps, schema_editor):
    Function = apps.get_model("metarecord", "Function")
    Function.objects.filter(state="deleted").delete()


def populate_user_name_field(apps, field_name, model_class):
    """
    Populate related user's full name to equivalent char field prefixed with
    single underscore. The char field is expected to be in the same table as
    the foreign key.
    """
    User = apps.get_model("users", "User")
    char_field_name = "_%s" % field_name

    full_name = (
        User.objects.filter(pk=OuterRef(field_name))
        .annotate(full_name=Trim(Concat("first_name", Value(" "), "last_name")))
        .values_list("full_name")[:1]
    )

    model_class.objects.exclude(**{field_name: None}).update(
        **{char_field_name: Subquery(full_name)}
    )


def populate_function_user_name_fields(apps, schema_editor):
    Function = apps.get_model("metarecord", "Function")
    populate_user_name_field(apps, "created_by", Function)
    populate_user_name_field(apps, "modified_by", Function)


def populate_phase_user_name_fields(apps, schema_editor):
    Phase = apps.get_model("metarecord", "Phase")
    populate_user_name_field(apps, "created_by", Phase)
    populate_user_name_field(apps, "modified_by", Phase)


def populate_action_user_name_fields(apps, schema_editor):
    Action = apps.get_model("metarecord", "Action")
    populate_user_name_field(apps, "created_by", Action)
    populate_user_name_field(apps, "modified_by", Action)


def populate_record_user_name_fields(apps, schema_editor):
    Record = apps.get_model("metarecord", "Record")
    populate_user_name_field(apps, "created_by", Record)
    populate_user_name_field(apps, "modified_by", Record)


def populate_bulk_update_user_name_fields(apps, schema_editor):
    BulkUpdate = apps.get_model("metarecord", "BulkUpdate")
    populate_user_name_field(apps, "approved_by", BulkUpdate)
    populate_user_name_field(apps, "created_by", BulkUpdate)
    populate_user_name_field(apps, "modified_by", BulkUpdate)


def populate_metadata_version_user_name_fields(apps, schema_editor):
    MetadataVersion = apps.get_model("metarecord", "MetadataVersion")
    populate_user_name_field(apps, "modified_by", MetadataVersion)


def set_existing_classifications_as_approved(apps, schema_editor):
    Classification = apps.get_model("metarecord", "Classification")
    Classification.objects.all().update(state="approved")


class Migration(migrations.Migration):
    replaces = [
        ("metarecord", "0001_initial"),
        ("metarecord", "0002_function_id_unique_and_db_index"),
        ("metarecord", "0003_auto_20160417_1157"),
        ("metarecord", "0004_add_missing_attributes"),
        ("metarecord", "0005_freetext_attributes"),
        ("metarecord", "0006_new_data_model"),
        ("metarecord", "0007_attribute_is_free_text"),
        ("metarecord", "0008_longer_attribute_values"),
        ("metarecord", "0009_add_record_attachment"),
        ("metarecord", "0010_rename_order_to_index"),
        ("metarecord", "0011_remove_record_attachment"),
        ("metarecord", "0012_hstore_attributes"),
        ("metarecord", "0013_add_function_is_template"),
        ("metarecord", "0014_int_id_structural_elements"),
        ("metarecord", "0015_versionable_functions"),
        ("metarecord", "0016_add_attribute_index"),
        ("metarecord", "0017_remove_record_type"),
        ("metarecord", "0018_function_uuid_version_unique"),
        ("metarecord", "0019_add_metarecord_version"),
        ("metarecord", "0020_add_attribute_group"),
        ("metarecord", "0021_add_validation_dates"),
        ("metarecord", "0022_remove_name"),
        ("metarecord", "0023_add_attribute_value_index"),
        ("metarecord", "0024_attibute_value_index_unique"),
        ("metarecord", "0025_add_attribute_help_text"),
        ("metarecord", "0026_use_native_hstore"),
        ("metarecord", "0027_add_classification"),
        ("metarecord", "0028_remove_function_parent"),
        ("metarecord", "0029_add_db_index_for_uuids"),
        ("metarecord", "0030_add_can_view_modified_by_permission"),
        ("metarecord", "0031_add_deleted_state"),
        ("metarecord", "0032_add_additional_information_and_related_classification"),
        ("metarecord", "0033_change_attributes_fields_to_jsonb"),
        ("metarecord", "0034_add_function_classification_related_name"),
        ("metarecord", "0035_add_on_deletes"),
        ("metarecord", "0036_add_classification_function_allowed"),
        ("metarecord", "0037_update_function_modified_by_to_latest_metadata"),
        ("metarecord", "0038_disable_unique_attribute_value_index"),
        ("metarecord", "0039_remove_deleted_state"),
        ("metarecord", "0040_bulk_update"),
        ("metarecord", "0041_excessmeta"),
        ("metarecord", "0042_bulkupdate_approved_by"),
        ("metarecord", "0043_add_name_and_help_text_to_attribute_value"),
        ("metarecord", "0044_user_relation_texts"),
        ("metarecord", "0045_populate_persistent_user_name_fields"),
        ("metarecord", "0046_classification_versioning"),
        ("metarecord", "0047_approve_existing_classifications"),
        ("metarecord", "0048_replace_pg_jsonfield_with_django_jsonfield"),
    ]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Action",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="time of creation",
                    ),
                ),
                (
                    "modified_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="time of modification",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "index",
                    models.PositiveSmallIntegerField(
                        db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "attributes",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="attributes"
                    ),
                ),
                ("name", models.CharField(max_length=256, verbose_name="name")),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="action_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="action_modified",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="modified by",
                    ),
                ),
            ],
            options={
                "ordering": ("phase", "index"),
                "verbose_name": "action",
                "verbose_name_plural": "actions",
            },
        ),
        migrations.CreateModel(
            name="Attribute",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="time of creation",
                    ),
                ),
                (
                    "modified_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="time of modification",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "identifier",
                    models.CharField(
                        db_index=True,
                        max_length=64,
                        unique=True,
                        verbose_name="identifier",
                    ),
                ),
                ("name", models.CharField(max_length=256, verbose_name="name")),
                ("index", models.PositiveSmallIntegerField(default=0)),
            ],
            options={
                "verbose_name": "attribute",
                "verbose_name_plural": "attributes",
                "ordering": ("index",),
            },
        ),
        migrations.CreateModel(
            name="Function",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="time of creation",
                    ),
                ),
                (
                    "modified_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="time of modification",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "index",
                    models.PositiveSmallIntegerField(
                        db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "attributes",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="attributes"
                    ),
                ),
                (
                    "function_id",
                    models.CharField(
                        db_index=True,
                        max_length=16,
                        null=True,
                        verbose_name="function ID",
                    ),
                ),
                ("name", models.CharField(max_length=256, verbose_name="name")),
                ("error_count", models.PositiveIntegerField(default=0)),
                (
                    "is_template",
                    models.BooleanField(default=False, verbose_name="is template"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="function_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="function_modified",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="modified by",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="metarecord.Function",
                        verbose_name="parent",
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("sent_for_review", "Sent for review"),
                            ("waiting_for_approval", "Waiting for approval"),
                            ("approved", "Approved"),
                        ],
                        default="draft",
                        max_length=20,
                    ),
                ),
                (
                    "version",
                    models.PositiveIntegerField(
                        blank=True, db_index=True, default=1, null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "function",
                "verbose_name_plural": "functions",
                "unique_together": {("uuid", "version")},
            },
        ),
        migrations.CreateModel(
            name="Phase",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="time of creation",
                    ),
                ),
                (
                    "modified_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="time of modification",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "index",
                    models.PositiveSmallIntegerField(
                        db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "attributes",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="attributes"
                    ),
                ),
                ("name", models.CharField(max_length=256, verbose_name="name")),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="phase_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "function",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="phases",
                        to="metarecord.Function",
                        verbose_name="function",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="phase_modified",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="modified by",
                    ),
                ),
            ],
            options={
                "ordering": ("function", "index"),
                "verbose_name": "phase",
                "verbose_name_plural": "phases",
            },
        ),
        migrations.CreateModel(
            name="RecordType",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="time of creation",
                    ),
                ),
                (
                    "modified_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="time of modification",
                    ),
                ),
                ("value", models.CharField(max_length=256, verbose_name="name")),
            ],
            options={
                "verbose_name": "record type",
                "verbose_name_plural": "record types",
            },
        ),
        migrations.CreateModel(
            name="Record",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="time of creation",
                    ),
                ),
                (
                    "modified_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="time of modification",
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "index",
                    models.PositiveSmallIntegerField(
                        db_index=True, editable=False, null=True
                    ),
                ),
                (
                    "attributes",
                    models.JSONField(
                        blank=True, default=dict, verbose_name="attributes"
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=256, verbose_name="type specifier"),
                ),
                (
                    "action",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="records",
                        to="metarecord.Action",
                        verbose_name="action",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="record_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="record_modified",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="modified by",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="metarecord.Record",
                        verbose_name="parent",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="records",
                        to="metarecord.RecordType",
                        verbose_name="type",
                    ),
                ),
            ],
            options={
                "ordering": ("action", "index"),
                "verbose_name": "record",
                "verbose_name_plural": "records",
            },
        ),
        migrations.AddField(
            model_name="action",
            name="phase",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="actions",
                to="metarecord.Phase",
                verbose_name="phase",
            ),
        ),
        migrations.CreateModel(
            name="AttributeValue",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="time of creation",
                    ),
                ),
                (
                    "modified_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="time of modification",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("value", models.CharField(max_length=1024, verbose_name="value")),
                (
                    "attribute",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="values",
                        to="metarecord.Attribute",
                        verbose_name="attribute",
                    ),
                ),
            ],
            options={
                "verbose_name": "attribute value",
                "verbose_name_plural": "attribute values",
                "unique_together": {("attribute", "value")},
            },
        ),
        migrations.RunPython(
            code=add_indexes,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="attribute",
            name="index",
            field=models.PositiveSmallIntegerField(db_index=True),
        ),
        migrations.RemoveField(
            model_name="record",
            name="type",
        ),
        migrations.DeleteModel(
            name="RecordType",
        ),
        migrations.AlterModelOptions(
            name="function",
            options={
                "permissions": (
                    ("can_edit", "Can edit"),
                    ("can_review", "Can review"),
                    ("can_approve", "Can approve"),
                ),
                "verbose_name": "function",
                "verbose_name_plural": "functions",
            },
        ),
        migrations.AlterField(
            model_name="action",
            name="created_at",
            field=models.DateTimeField(
                auto_now_add=True, verbose_name="time of creation"
            ),
        ),
        migrations.AlterField(
            model_name="action",
            name="modified_at",
            field=models.DateTimeField(
                auto_now=True, verbose_name="time of modification"
            ),
        ),
        migrations.AlterField(
            model_name="attribute",
            name="created_at",
            field=models.DateTimeField(
                auto_now_add=True, verbose_name="time of creation"
            ),
        ),
        migrations.AlterField(
            model_name="attribute",
            name="modified_at",
            field=models.DateTimeField(
                auto_now=True, verbose_name="time of modification"
            ),
        ),
        migrations.AlterField(
            model_name="attributevalue",
            name="created_at",
            field=models.DateTimeField(
                auto_now_add=True, verbose_name="time of creation"
            ),
        ),
        migrations.AlterField(
            model_name="attributevalue",
            name="modified_at",
            field=models.DateTimeField(
                auto_now=True, verbose_name="time of modification"
            ),
        ),
        migrations.AlterField(
            model_name="function",
            name="created_at",
            field=models.DateTimeField(
                auto_now_add=True, verbose_name="time of creation"
            ),
        ),
        migrations.AlterField(
            model_name="function",
            name="error_count",
            field=models.PositiveIntegerField(default=0, verbose_name="error count"),
        ),
        migrations.AlterField(
            model_name="function",
            name="modified_at",
            field=models.DateTimeField(
                auto_now=True, verbose_name="time of modification"
            ),
        ),
        migrations.AlterField(
            model_name="function",
            name="state",
            field=models.CharField(
                choices=[
                    ("draft", "Draft"),
                    ("sent_for_review", "Sent for review"),
                    ("waiting_for_approval", "Waiting for approval"),
                    ("approved", "Approved"),
                ],
                default="draft",
                max_length=20,
                verbose_name="state",
            ),
        ),
        migrations.AlterField(
            model_name="phase",
            name="created_at",
            field=models.DateTimeField(
                auto_now_add=True, verbose_name="time of creation"
            ),
        ),
        migrations.AlterField(
            model_name="phase",
            name="modified_at",
            field=models.DateTimeField(
                auto_now=True, verbose_name="time of modification"
            ),
        ),
        migrations.AlterField(
            model_name="record",
            name="created_at",
            field=models.DateTimeField(
                auto_now_add=True, verbose_name="time of creation"
            ),
        ),
        migrations.AlterField(
            model_name="record",
            name="modified_at",
            field=models.DateTimeField(
                auto_now=True, verbose_name="time of modification"
            ),
        ),
        migrations.CreateModel(
            name="MetadataVersion",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("modified_at", models.DateTimeField(verbose_name="modified at")),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("sent_for_review", "Sent for review"),
                            ("waiting_for_approval", "Waiting for approval"),
                            ("approved", "Approved"),
                        ],
                        default="draft",
                        max_length=20,
                        verbose_name="state",
                    ),
                ),
                (
                    "function",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="metadata_versions",
                        to="metarecord.Function",
                        verbose_name="function",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="modified by",
                    ),
                ),
            ],
            options={
                "ordering": ("id",),
            },
        ),
        migrations.RunPython(
            code=add_initial_metarecord_versions,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.CreateModel(
            name="AttributeGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=64, verbose_name="name")),
            ],
            options={
                "verbose_name": "attribute group",
                "verbose_name_plural": "attribute groups",
            },
        ),
        migrations.AddField(
            model_name="attribute",
            name="group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="attributes",
                to="metarecord.AttributeGroup",
                verbose_name="group",
            ),
        ),
        migrations.AddField(
            model_name="function",
            name="valid_to",
            field=models.DateField(blank=True, null=True, verbose_name="valid to"),
        ),
        migrations.AddField(
            model_name="function",
            name="valid_from",
            field=models.DateField(blank=True, null=True, verbose_name="valid from"),
        ),
        migrations.AddField(
            model_name="metadataversion",
            name="valid_to",
            field=models.DateField(blank=True, null=True, verbose_name="valid to"),
        ),
        migrations.AddField(
            model_name="metadataversion",
            name="valid_from",
            field=models.DateField(blank=True, null=True, verbose_name="valid from"),
        ),
        migrations.RemoveField(
            model_name="action",
            name="name",
        ),
        migrations.RemoveField(
            model_name="phase",
            name="name",
        ),
        migrations.RemoveField(
            model_name="record",
            name="name",
        ),
        migrations.AlterModelOptions(
            name="attributevalue",
            options={
                "ordering": ("index",),
                "verbose_name": "attribute value",
                "verbose_name_plural": "attribute values",
            },
        ),
        migrations.AddField(
            model_name="attributevalue",
            name="index",
            field=models.PositiveSmallIntegerField(db_index=True, default=0),
            preserve_default=False,
        ),
        migrations.RunPython(
            code=add_attribute_value_indexes,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterUniqueTogether(
            name="attributevalue",
            unique_together={("attribute", "index"), ("attribute", "value")},
        ),
        migrations.AddField(
            model_name="attribute",
            name="help_text",
            field=models.TextField(blank=True, verbose_name="help text"),
        ),
        migrations.CreateModel(
            name="Classification",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
                ),
                (
                    "code",
                    models.CharField(db_index=True, max_length=16, verbose_name="code"),
                ),
                ("title", models.CharField(max_length=256, verbose_name="title")),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "description_internal",
                    models.TextField(blank=True, verbose_name="description internal"),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="metarecord.Classification",
                        verbose_name="parent",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="time of creation"
                    ),
                ),
                (
                    "modified_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="time of modification"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "classifications",
                "verbose_name": "classification",
            },
        ),
        migrations.AddField(
            model_name="function",
            name="classification",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="metarecord.Classification",
                verbose_name="classification",
            ),
        ),
        migrations.RunPython(
            code=populate_classification,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name="function",
            name="parent",
        ),
        migrations.RemoveField(
            model_name="function",
            name="function_id",
        ),
        migrations.AlterField(
            model_name="function",
            name="name",
            field=models.CharField(blank=True, max_length=256, verbose_name="name"),
        ),
        migrations.AlterField(
            model_name="classification",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="children",
                to="metarecord.Classification",
                verbose_name="parent",
            ),
        ),
        migrations.AlterField(
            model_name="action",
            name="uuid",
            field=models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
        ),
        migrations.AlterField(
            model_name="function",
            name="uuid",
            field=models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
        ),
        migrations.AlterField(
            model_name="phase",
            name="uuid",
            field=models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
        ),
        migrations.AlterField(
            model_name="record",
            name="uuid",
            field=models.UUIDField(db_index=True, default=uuid.uuid4, editable=False),
        ),
        migrations.AlterModelOptions(
            name="function",
            options={
                "permissions": (
                    ("can_edit", "Can edit"),
                    ("can_review", "Can review"),
                    ("can_approve", "Can approve"),
                    ("can_view_modified_by", "Can view modified by"),
                ),
                "verbose_name": "function",
                "verbose_name_plural": "functions",
            },
        ),
        migrations.AlterField(
            model_name="function",
            name="state",
            field=models.CharField(
                choices=[
                    ("draft", "Draft"),
                    ("sent_for_review", "Sent for review"),
                    ("waiting_for_approval", "Waiting for approval"),
                    ("approved", "Approved"),
                    ("deleted", "Deleted"),
                ],
                default="draft",
                max_length=20,
                verbose_name="state",
            ),
        ),
        migrations.AlterField(
            model_name="metadataversion",
            name="state",
            field=models.CharField(
                choices=[
                    ("draft", "Draft"),
                    ("sent_for_review", "Sent for review"),
                    ("waiting_for_approval", "Waiting for approval"),
                    ("approved", "Approved"),
                    ("deleted", "Deleted"),
                ],
                default="draft",
                max_length=20,
                verbose_name="state",
            ),
        ),
        migrations.AddField(
            model_name="classification",
            name="additional_information",
            field=models.TextField(blank=True, verbose_name="additional information"),
        ),
        migrations.AddField(
            model_name="classification",
            name="related_classification",
            field=models.TextField(blank=True, verbose_name="related classification"),
        ),
        migrations.AlterField(
            model_name="function",
            name="classification",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="functions",
                to="metarecord.Classification",
                verbose_name="classification",
            ),
        ),
        migrations.AlterField(
            model_name="action",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="action_created",
                to=settings.AUTH_USER_MODEL,
                verbose_name="created by",
            ),
        ),
        migrations.AlterField(
            model_name="action",
            name="modified_by",
            field=models.ForeignKey(
                blank=True,
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="action_modified",
                to=settings.AUTH_USER_MODEL,
                verbose_name="modified by",
            ),
        ),
        migrations.AlterField(
            model_name="attribute",
            name="group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="attributes",
                to="metarecord.AttributeGroup",
                verbose_name="group",
            ),
        ),
        migrations.AlterField(
            model_name="classification",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="children",
                to="metarecord.Classification",
                verbose_name="parent",
            ),
        ),
        migrations.AlterField(
            model_name="function",
            name="classification",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="functions",
                to="metarecord.Classification",
                verbose_name="classification",
            ),
        ),
        migrations.AlterField(
            model_name="function",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="function_created",
                to=settings.AUTH_USER_MODEL,
                verbose_name="created by",
            ),
        ),
        migrations.AlterField(
            model_name="function",
            name="modified_by",
            field=models.ForeignKey(
                blank=True,
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="function_modified",
                to=settings.AUTH_USER_MODEL,
                verbose_name="modified by",
            ),
        ),
        migrations.AlterField(
            model_name="metadataversion",
            name="modified_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
                verbose_name="modified by",
            ),
        ),
        migrations.AlterField(
            model_name="phase",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="phase_created",
                to=settings.AUTH_USER_MODEL,
                verbose_name="created by",
            ),
        ),
        migrations.AlterField(
            model_name="phase",
            name="modified_by",
            field=models.ForeignKey(
                blank=True,
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="phase_modified",
                to=settings.AUTH_USER_MODEL,
                verbose_name="modified by",
            ),
        ),
        migrations.AlterField(
            model_name="record",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="record_created",
                to=settings.AUTH_USER_MODEL,
                verbose_name="created by",
            ),
        ),
        migrations.AlterField(
            model_name="record",
            name="modified_by",
            field=models.ForeignKey(
                blank=True,
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="record_modified",
                to=settings.AUTH_USER_MODEL,
                verbose_name="modified by",
            ),
        ),
        migrations.AddField(
            model_name="classification",
            name="function_allowed",
            field=models.BooleanField(default=False, verbose_name="function allowed"),
        ),
        migrations.RunPython(
            code=populate_function_allowed,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=update_function_modified_by,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterUniqueTogether(
            name="attributevalue",
            unique_together={("attribute", "value")},
        ),
        migrations.RunPython(
            code=delete_soft_deleted_functions,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="function",
            name="state",
            field=models.CharField(
                choices=[
                    ("draft", "Draft"),
                    ("sent_for_review", "Sent for review"),
                    ("waiting_for_approval", "Waiting for approval"),
                    ("approved", "Approved"),
                ],
                default="draft",
                max_length=20,
                verbose_name="state",
            ),
        ),
        migrations.AlterField(
            model_name="metadataversion",
            name="state",
            field=models.CharField(
                choices=[
                    ("draft", "Draft"),
                    ("sent_for_review", "Sent for review"),
                    ("waiting_for_approval", "Waiting for approval"),
                    ("approved", "Approved"),
                ],
                default="draft",
                max_length=20,
                verbose_name="state",
            ),
        ),
        migrations.CreateModel(
            name="BulkUpdate",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="time of creation"
                    ),
                ),
                (
                    "modified_at",
                    models.DateTimeField(
                        auto_now=True, verbose_name="time of modification"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True, max_length=512, verbose_name="description"
                    ),
                ),
                (
                    "is_approved",
                    models.BooleanField(default=False, verbose_name="is approved"),
                ),
                (
                    "changes",
                    models.JSONField(blank=True, default=dict, verbose_name="changes"),
                ),
                (
                    "state",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("sent_for_review", "Sent for review"),
                            ("waiting_for_approval", "Waiting for approval"),
                            ("approved", "Approved"),
                        ],
                        help_text="The state that is assigned to functions after applying the updates",
                        max_length=20,
                        verbose_name="state",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="bulkupdate_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="created by",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="bulkupdate_modified",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="modified by",
                    ),
                ),
                (
                    "approved_by",
                    models.ForeignKey(
                        blank=True,
                        editable=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="bulkupdate_approved",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="approved by",
                    ),
                ),
                (
                    "_approved_by",
                    models.CharField(
                        blank=True,
                        editable=False,
                        max_length=200,
                        verbose_name="approved by (text)",
                    ),
                ),
                (
                    "_created_by",
                    models.CharField(
                        blank=True,
                        editable=False,
                        max_length=200,
                        verbose_name="created by (text)",
                    ),
                ),
                (
                    "_modified_by",
                    models.CharField(
                        blank=True,
                        editable=False,
                        max_length=200,
                        verbose_name="modified by (text)",
                    ),
                ),
            ],
            options={
                "verbose_name": "bulk update",
                "verbose_name_plural": "bulk updates",
                "permissions": (("approve_bulkupdate", "Can approve bulk update"),),
            },
        ),
        migrations.AddField(
            model_name="function",
            name="bulk_update",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="functions",
                to="metarecord.BulkUpdate",
                verbose_name="bulk update",
            ),
        ),
        migrations.AddField(
            model_name="attributevalue",
            name="help_text",
            field=models.TextField(blank=True, verbose_name="help text"),
        ),
        migrations.AddField(
            model_name="attributevalue",
            name="name",
            field=models.CharField(blank=True, max_length=256, verbose_name="name"),
        ),
        migrations.AddField(
            model_name="action",
            name="_created_by",
            field=models.CharField(
                blank=True,
                editable=False,
                max_length=200,
                verbose_name="created by (text)",
            ),
        ),
        migrations.AddField(
            model_name="action",
            name="_modified_by",
            field=models.CharField(
                blank=True,
                editable=False,
                max_length=200,
                verbose_name="modified by (text)",
            ),
        ),
        migrations.AddField(
            model_name="function",
            name="_created_by",
            field=models.CharField(
                blank=True,
                editable=False,
                max_length=200,
                verbose_name="created by (text)",
            ),
        ),
        migrations.AddField(
            model_name="function",
            name="_modified_by",
            field=models.CharField(
                blank=True,
                editable=False,
                max_length=200,
                verbose_name="modified by (text)",
            ),
        ),
        migrations.AddField(
            model_name="metadataversion",
            name="_modified_by",
            field=models.CharField(
                blank=True,
                editable=False,
                max_length=200,
                verbose_name="modified by (text)",
            ),
        ),
        migrations.AddField(
            model_name="phase",
            name="_created_by",
            field=models.CharField(
                blank=True,
                editable=False,
                max_length=200,
                verbose_name="created by (text)",
            ),
        ),
        migrations.AddField(
            model_name="phase",
            name="_modified_by",
            field=models.CharField(
                blank=True,
                editable=False,
                max_length=200,
                verbose_name="modified by (text)",
            ),
        ),
        migrations.AddField(
            model_name="record",
            name="_created_by",
            field=models.CharField(
                blank=True,
                editable=False,
                max_length=200,
                verbose_name="created by (text)",
            ),
        ),
        migrations.AddField(
            model_name="record",
            name="_modified_by",
            field=models.CharField(
                blank=True,
                editable=False,
                max_length=200,
                verbose_name="modified by (text)",
            ),
        ),
        migrations.RunPython(
            code=populate_function_user_name_fields,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=populate_phase_user_name_fields,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=populate_action_user_name_fields,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=populate_record_user_name_fields,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=populate_bulk_update_user_name_fields,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=populate_metadata_version_user_name_fields,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AlterModelOptions(
            name="classification",
            options={
                "permissions": (
                    ("can_edit_classification", "Can edit classification"),
                    ("can_review_classification", "Can review classification"),
                    ("can_approve_classification", "Can approve classification"),
                    (
                        "can_view_classification_modified_by",
                        "Can view classification modified by",
                    ),
                ),
                "verbose_name": "classification",
                "verbose_name_plural": "classifications",
            },
        ),
        migrations.AddField(
            model_name="classification",
            name="_created_by",
            field=models.CharField(
                blank=True,
                editable=False,
                max_length=200,
                verbose_name="created by (text)",
            ),
        ),
        migrations.AddField(
            model_name="classification",
            name="_modified_by",
            field=models.CharField(
                blank=True,
                editable=False,
                max_length=200,
                verbose_name="modified by (text)",
            ),
        ),
        migrations.AddField(
            model_name="classification",
            name="created_by",
            field=models.ForeignKey(
                blank=True,
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="classification_created",
                to=settings.AUTH_USER_MODEL,
                verbose_name="created by",
            ),
        ),
        migrations.AddField(
            model_name="classification",
            name="modified_by",
            field=models.ForeignKey(
                blank=True,
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="classification_modified",
                to=settings.AUTH_USER_MODEL,
                verbose_name="modified by",
            ),
        ),
        migrations.AddField(
            model_name="classification",
            name="state",
            field=models.CharField(
                choices=[
                    ("draft", "Draft"),
                    ("sent_for_review", "Sent for review"),
                    ("waiting_for_approval", "Waiting for approval"),
                    ("approved", "Approved"),
                ],
                default="draft",
                max_length=20,
                verbose_name="state",
            ),
        ),
        migrations.AddField(
            model_name="classification",
            name="valid_from",
            field=models.DateField(blank=True, null=True, verbose_name="valid from"),
        ),
        migrations.AddField(
            model_name="classification",
            name="valid_to",
            field=models.DateField(blank=True, null=True, verbose_name="valid to"),
        ),
        migrations.AddField(
            model_name="classification",
            name="version",
            field=models.PositiveIntegerField(
                blank=True, db_index=True, default=1, null=True
            ),
        ),
        migrations.AlterUniqueTogether(
            name="classification",
            unique_together={("uuid", "version")},
        ),
        migrations.RunPython(
            code=set_existing_classifications_as_approved,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
    ]
